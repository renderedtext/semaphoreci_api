# encoding: utf-8
# frozen_string_literal: true

#
# WARNING: Do not edit by hand, this file was generated by Heroics:
#
#   https://github.com/interagent/heroics
#

require 'heroics'
require 'uri'

module SemaphoreciApi
  # Get a Client configured to use HTTP Basic or header-based authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   or header-based authentication.
  def self.connect(api_key, options=nil)
    options = custom_options(options)
    uri = URI.parse(options[:url])

    if options[:user]
      uri.user = URI.encode_www_form_component options[:user]
    end

    if api_key
      uri.user ||= 'user'
      uri.password = api_key
    end

    client = Heroics.client_from_schema(SCHEMA, uri.to_s, options)
    Client.new(client)
  end

  # Get a Client configured to use OAuth authentication.
  #
  # @param oauth_token [String] The OAuth token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_oauth(oauth_token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.oauth_client_from_schema(oauth_token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get a Client configured to use Token authentication.
  #
  # @param token [String] The token to use with the API.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache` and `url`.
  # @return [Client] A client configured to use the API with OAuth
  #   authentication.
  def self.connect_token(token, options=nil)
    options = custom_options(options)
    url = options[:url]
    client = Heroics.token_client_from_schema(token, SCHEMA, url, options)
    Client.new(client)
  end

  # Get customized options.
  def self.custom_options(options)
    return default_options if options.nil?

    final_options = default_options
    if options[:default_headers]
      final_options[:default_headers].merge!(options[:default_headers])
    end
    final_options[:cache] = options[:cache] || Moneta.new(:File, dir: "#{Dir.home}/.heroics/example")
    final_options[:url] = options[:url] if options[:url]
    final_options[:user] = options[:user] if options[:user]
    final_options
  end

  # Get the default options.
  def self.default_options
    default_headers = {"Accept"=>"application/vnd.semaphoreci+json; version=1"}
    {
      default_headers: default_headers,
      url:             "https://semaphoreci.com/api/v2"
    }
  end

  private_class_method :default_options, :custom_options

  # Semaphore
  class Client
    def initialize(client)
      @client = client
    end

    # Get basic information about your organizations
    #
    # @return [Org]
    def org
      @org_resource ||= Org.new(@client)
    end

    # All aspects of team management
    #
    # @return [Team]
    def team
      @team_resource ||= Team.new(@client)
    end
  end

  private

  # Get basic information about your organizations
  class Org
    def initialize(client)
      @client = client
    end

    # Info for existing organization.
    #
    # @param org_username: unique username of organization
    def info(org_username)
      @client.org.info(org_username)
    end

    # List existing organizations.
    def list()
      @client.org.list()
    end
  end

  # All aspects of team management
  class Team
    def initialize(client)
      @client = client
    end

    # Create a new team.
    #
    # @param org_username: unique username of organization
    # @param body: the object to pass as the request payload
    def create(org_username, body = {})
      @client.team.create(org_username, body)
    end

    # Delete an existing team.
    #
    # @param team_id: unique identifier of team
    def delete(team_id)
      @client.team.delete(team_id)
    end

    # Info for existing team.
    #
    # @param team_id: unique identifier of team
    def info(team_id)
      @client.team.info(team_id)
    end

    # List existing teams for an org.
    #
    # @param org_username: unique username of organization
    def list(org_username)
      @client.team.list(org_username)
    end

    # Update an existing team.
    #
    # @param team_id: unique identifier of team
    # @param body: the object to pass as the request payload
    def update(team_id, body = {})
      @client.team.update(team_id, body)
    end
  end

  SCHEMA = Heroics::Schema.new(MultiJson.load(<<-'HEROICS_SCHEMA'))
{
  "$schema": "http://interagent.github.io/interagent-hyper-schema",
  "type": [
    "object"
  ],
  "definitions": {
    "org": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "title": "Organizations",
      "description": "Get basic information about your organizations",
      "stability": "prototype",
      "strictProperties": true,
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "description": "unique identifier of organization",
          "readOnly": true,
          "format": "uuid",
          "type": [
            "string"
          ]
        },
        "identity": {
          "anyOf": [
            {
              "$ref": "#/definitions/org/definitions/username"
            }
          ]
        },
        "url": {
          "description": "a link to the organization",
          "example": "https://api.semaphoreci.com/api/v2/orgs/{org_username}",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "username": {
          "description": "unique username of organization",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "name": {
          "description": "name of organization",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "updated_at": {
          "description": "when organization was updated",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "created_at": {
          "description": "when organization was created",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "links": [
        {
          "description": "Info for existing organization.",
          "href": "/orgs/{(%23%2Fdefinitions%2Forg%2Fdefinitions%2Fidentity)}",
          "method": "GET",
          "rel": "self",
          "title": "Info"
        },
        {
          "description": "List existing organizations.",
          "href": "/orgs",
          "method": "GET",
          "rel": "instances",
          "title": "List"
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/org/definitions/id"
        },
        "url": {
          "$ref": "#/definitions/org/definitions/url"
        },
        "username": {
          "$ref": "#/definitions/org/definitions/username"
        },
        "name": {
          "$ref": "#/definitions/org/definitions/name"
        },
        "updated_at": {
          "$ref": "#/definitions/org/definitions/updated_at"
        },
        "created_at": {
          "$ref": "#/definitions/org/definitions/created_at"
        }
      }
    },
    "team": {
      "$schema": "http://json-schema.org/draft-04/hyper-schema",
      "title": "Team",
      "description": "All aspects of team management",
      "stability": "prototype",
      "strictProperties": true,
      "type": [
        "object"
      ],
      "definitions": {
        "id": {
          "description": "unique identifier of team",
          "readOnly": true,
          "format": "uuid",
          "type": [
            "string"
          ]
        },
        "identity": {
          "anyOf": [
            {
              "$ref": "#/definitions/team/definitions/id"
            }
          ]
        },
        "permission": {
          "description": "unique name of team",
          "readOnly": true,
          "example": "admin",
          "type": [
            "string"
          ],
          "enum": [
            "read",
            "write",
            "admin"
          ]
        },
        "name": {
          "description": "name of team",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "description": {
          "description": "team description",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "url": {
          "description": "a link to the team",
          "example": "https://api.semaphoreci.com/api/v2/teams/{team_id}",
          "readOnly": true,
          "type": [
            "string"
          ]
        },
        "updated_at": {
          "description": "when team was updated",
          "format": "date-time",
          "type": [
            "string"
          ]
        },
        "created_at": {
          "description": "when team was created",
          "format": "date-time",
          "type": [
            "string"
          ]
        }
      },
      "links": [
        {
          "description": "Create a new team.",
          "href": "/orgs/{(%23%2Fdefinitions%2Forg%2Fdefinitions%2Fidentity)}/teams",
          "method": "POST",
          "rel": "create",
          "schema": {
            "properties": {
              "name": {
                "$ref": "#/definitions/team/definitions/name"
              },
              "description": {
                "$ref": "#/definitions/team/definitions/description"
              },
              "permission": {
                "$ref": "#/definitions/team/definitions/permission"
              }
            },
            "required": [
              "name",
              "permission"
            ],
            "type": [
              "object"
            ]
          },
          "title": "Create"
        },
        {
          "description": "Delete an existing team.",
          "href": "/teams/{(%23%2Fdefinitions%2Fteam%2Fdefinitions%2Fidentity)}",
          "method": "DELETE",
          "rel": "destroy",
          "title": "Delete"
        },
        {
          "description": "Info for existing team.",
          "href": "/teams/{(%23%2Fdefinitions%2Fteam%2Fdefinitions%2Fidentity)}",
          "method": "GET",
          "rel": "self",
          "title": "Info"
        },
        {
          "description": "List existing teams for an org.",
          "href": "/orgs/{(%23%2Fdefinitions%2Forg%2Fdefinitions%2Fidentity)}/teams",
          "method": "GET",
          "rel": "instances",
          "title": "List"
        },
        {
          "description": "Update an existing team.",
          "href": "/teams/{(%23%2Fdefinitions%2Fteam%2Fdefinitions%2Fidentity)}",
          "method": "PATCH",
          "rel": "update",
          "schema": {
            "properties": {
              "name": {
                "$ref": "#/definitions/team/definitions/name"
              },
              "description": {
                "$ref": "#/definitions/team/definitions/description"
              },
              "permission": {
                "$ref": "#/definitions/team/definitions/permission"
              }
            },
            "type": [
              "object"
            ]
          },
          "title": "Update"
        }
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/team/definitions/id"
        },
        "url": {
          "$ref": "#/definitions/team/definitions/url"
        },
        "name": {
          "$ref": "#/definitions/team/definitions/name"
        },
        "description": {
          "$ref": "#/definitions/team/definitions/description"
        },
        "permission": {
          "$ref": "#/definitions/team/definitions/permission"
        },
        "updated_at": {
          "$ref": "#/definitions/team/definitions/updated_at"
        },
        "created_at": {
          "$ref": "#/definitions/team/definitions/created_at"
        }
      }
    }
  },
  "properties": {
    "org": {
      "$ref": "#/definitions/org"
    },
    "team": {
      "$ref": "#/definitions/team"
    }
  },
  "description": "Semaphore",
  "id": "hello-prmd",
  "links": [
    {
      "href": "https://api.semaphoreci.com/api/v2",
      "rel": "self"
    }
  ],
  "title": "Hello Prmd"
}
HEROICS_SCHEMA
end
